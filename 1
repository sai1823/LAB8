library(shiny)
library(ggplot2)
library(dplyr)

# Read iris data
iris_data <- read.csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv")

# Define UI
ui <- fluidPage(
  titlePanel("Iris Data Visualization"),
  
  # Histograms
  h2("Histograms"),
  fluidRow(
    column(
      width = 3,
      selectInput(
        inputId = "hist_var",
        label = "Variable:",
        choices = c("sepal_length", "sepal_width", "petal_length", "petal_width"),
        selected = "sepal_length"
      )
    ),
    column(
      width = 3,
      numericInput(
        inputId = "bin_size",
        label = "Bin Size:",
        value = 30,
        min = 1,
        max = 100
      )
    ),
    column(
      width = 3,
      selectInput(
        inputId = "hist_color",
        label = "Color:",
        choices = c("Red", "Green", "Blue", "Purple"),
        selected = "Red"
      )
    )
  ),
  plotOutput(outputId = "hist_plot", height = "300px"),
  
  # Scatter plot
  h2("Scatter Plot"),
  fluidRow(
    column(
      width = 3,
      selectInput(
        inputId = "x_var",
        label = "X-axis Variable:",
        choices = c("sepal_length", "sepal_width", "petal_length", "petal_width"),
        selected = "sepal_length"
      )
    ),
    column(
      width = 3,
      selectInput(
        inputId = "y_var",
        label = "Y-axis Variable:",
        choices = c("sepal_length", "sepal_width", "petal_length", "petal_width"),
        selected = "sepal_width"
      )
    ),
    column(
      width = 3,
      selectInput(
        inputId = "scatter_color",
        label = "Color:",
        choices = c("Red", "Green", "Blue", "Purple"),
        selected = "Green"
      )
    )
  ),
  plotOutput(outputId = "scatter_plot", height = "300px"),
  
  # Violin plot
  h2("Violin Plot"),
  fluidRow(
    column(
      width = 3,
      selectInput(
        inputId = "violin_var",
        label = "Variable:",
        choices = c("sepal_length", "sepal_width", "petal_length", "petal_width"),
        selected = "sepal_length"
      )
    ),
    column(
      width = 3,
      selectInput(
        inputId = "violin_color",
        label = "Color:",
        choices = c("Red", "Green", "Blue", "Purple"),
        selected = "Blue"
      )
    )
  ),
  plotOutput(outputId = "violin_plot", height = "300px")
)


# Define server
server <- function(input, output) {

# Histograms
output$hist_plot <- renderPlot({
ggplot(data = iris_data, aes(x = iris_data[[input$hist_var]], fill = input$hist_color)) +
geom_histogram(binwidth = input$bin_size) +
labs(x = input$hist_var, y = "Count") +
theme_minimal()
})

# Scatter plot
output$scatter_plot <- renderPlot({
filtered_data <- iris_data %>%
select(input$x_var, input$y_var)
ggplot(data = filtered_data, aes(x = !!sym(input$x_var), y = !!sym(input$y_var), color = input$scatter_color)) +
geom_point() +
labs(x = input$x_var, y = input$y_var, color = "Color") +
theme_minimal()
})

# Violin plot
output$violin_plot <- renderPlot({
ggplot(data = iris_data, aes(x = iris_data[[input$violin_var]], fill = input$violin_color)) +
geom_violin() +
labs(x = input$violin_var, y = "Value", fill = "Color") +
theme_minimal()
})
}

# Run the app
shinyApp(ui = ui, server = server)




